from aqt.qt import QMessageBox
from aqt import mw
from anki.hooks import addHook
from aqt.utils import askUser, showInfo
import os
import subprocess
import re

def generate_audio_for_note(note: Note, replace_existing=False):
    import time
    term = note["term"].strip() if "term" in note else ""
    term = term.replace('\u00A0', ' ').replace('\xa0', ' ').replace('&nbsp;', ' ')  # Normalize all nbsp variants
    if not term:
        showInfo("‚ö†Ô∏è Skipped a note because the 'term' field was empty.")
        return

    sanitized_term = re.sub(r"[^\w\-]", "_", term)
    filename = f"{sanitized_term}.mp3"
    media_dir = mw.col.media.dir()
    media_path = os.path.join(media_dir, filename)
    temp_aiff_path = os.path.join(media_dir, f"{sanitized_term}_{int(time.time())}.aiff")

    if os.path.exists(media_path) and not replace_existing:
        return

    try:
        print(f"üîä Using say command for: {term}")
        subprocess.run(['say', '-v', 'Alice', '-o', temp_aiff_path, '--data-format=LEF32@22050', term], check=True)

        print(f"üéß Converting to mp3 with ffmpeg")
        subprocess.run(['/opt/homebrew/bin/ffmpeg', '-y', '-i', temp_aiff_path, '-codec:a', 'libmp3lame', '-qscale:a', '2', media_path], check=True)
    except subprocess.CalledProcessError as e:
        showInfo(f"‚ùå Error generating audio for '{term}': {e}")
    finally:
        if os.path.exists(temp_aiff_path):
            os.remove(temp_aiff_path)

    note["Audio"] = f"[sound:{filename}]"
    note.flush()

def run_audio_generation():
    replace = askUser("Do you want to replace existing audio files?", defaultno=True)
    if not replace:
        return

    media_dir = mw.col.media.dir()
    print(f"Media directory: {media_dir}")

    for note in mw.col.notes():
        generate_audio_for_note(note, replace)

addHook("profileLoaded", run_audio_generation)
